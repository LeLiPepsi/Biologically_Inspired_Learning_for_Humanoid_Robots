#include <iostream>
#include <cmath>
#include <fstream>
#include <stdlib.h>
#include <stdio.h>
using namespace std;

#define Resolution 50
#define N 2 //input dimensions
#define Q 2 //output dimensions
#define Field_Size 5
#define MSE_THRESHOLD 0.0001
#define alpha 0.5

static int RFpos[Field_Size][N] = { { 0, 3 }, { 1, 0 }, { 2, 2 }, { 3, 4 }, { 4, 1 } };
//static int RFpos[Field_Size][N] = { { 0, 2 }, { 1, 0 }, { 2, 1 }};
class CMAC
{
public:
    //void Predict(double x, double y, double joint_value[]); //predict output by using the trained NN
    void Predict(double x, double y, double joint_value[]);
    void Train(double a_in[][N], double c_out[][Q]);
    void SavePara();
    void LoadPara();

private:
    void Forward();
    void Init();
    int Position[Field_Size][N];
    double wa[Resolution][Resolution] ; //L2
    double wb[Resolution][Resolution] ; //L2
    int nsample;
    double Y[N]; //L1
    double X[Q]; //L3
    double MSE;
    int j;
    int k;

};

void CMAC::Train(double Y_in[140][N], double X_out[140][Q])
{
    //nsample = sizeof(Y_in[0]) / sizeof(Y_in);

    nsample = 140;
    int iter = 1;
    Init();
    while (1)
    {
        MSE = 0;
        for (int m = 0; m < nsample; m++)
        {
            //get the input data
            for (int c = 0; c < N; c++)
            {
                Y[c] = Y_in[m][c];
            }
            Forward();
            //update


            for (int r = 0; r < Field_Size; r++)
            {
                j = Position[r][0];
                k = Position[r][1];
                wa[j][k] += alpha * (X_out[m][0] - X[0]) / Field_Size;
            }
            for (int r = 0; r < Field_Size; r++)
            {
                j = Position[r][0];
                k = Position[r][1];
                wb[j][k] += alpha * (X_out[m][1] - X[1]) / Field_Size;
            }
            double output_error = 0;
            //MSE
            for (int i = 0; i < Q; i++){
                output_error += (X_out[m][i] - X[i]) * (X_out[m][i] - X[i]);
            }
            //output_error += (X_out[m][0] - X[0]) * (X_out[m][0] - X[0]) + (X_out[m][1] - X[1]) * (X_out[m][1] - X[1]);
            MSE += 0.5 * output_error;
        }//end for nsample loop
        MSE = MSE / (nsample * 2);
        if (iter % 1 == 0)
        {
            cout << iter << "th iteration!" << endl << MSE << endl;
        }
        if (MSE<0.000003)
        {
            cout << "seccessful trained!" << endl; break;
        }
        iter++;
    }//end while loop
}

void CMAC::Init()
{
    for (int j = 0; j < Resolution; j++)
    {
        for (int k = 0; k < Resolution; k++)
        {
            //wa[j][k] = 0.2;
            //wb[j][k] = -0.2;

            wa[j][k] = (double)rand() / (double)(RAND_MAX)* 2 - 1;
            wb[j][k] = (double)rand() / (double)(RAND_MAX)* 2 - 1;
            //cout<<w[1][j][k]<<" ";
        }//cout<<endl;
    }

}

void CMAC::Forward()
{
    //int RFpos[Field_Size][N] = { { 0, 3 }, { 1, 0 }, { 2, 2 }, { 3, 4 }, { 4, 1 } };
    int local_coord;
    int shift_amount;
    double input_index_double;
    int input_index;
    int coord;
    int j;
    int k;
    for (int r = 0; r < Field_Size; r++)
    {
        int Coord[N];
        for (int c = 0; c < N; c++)
        {
            input_index_double = round(Y[c] * Resolution);
            input_index = int(input_index_double);
            if (input_index > (Resolution-Field_Size)){ input_index = (Resolution-Field_Size); }
            shift_amount = Field_Size - input_index % Field_Size;
            local_coord = (shift_amount + RFpos[r][c]) % Field_Size;
            coord = input_index + local_coord;
            Coord[c] = coord;
            Position[r][c] = coord;
        }
    }
    X[0] = 0;
    for (int r = 0; r < Field_Size; r++)
    {
        j = Position[r][0];
        k = Position[r][1];
        X[0] += wa[j][k];
    }
    X[1] = 0;
    for (int r = 0; r < Field_Size; r++)
    {
        j = Position[r][0];
        k = Position[r][1];
        X[1] += wb[j][k];
    }

    //cout << X[0] << " " << X[1] << endl;
}

void CMAC::SavePara()
{
    ofstream inFile;
    inFile.open("W1.txt", ios::trunc);
    for (int j = 0; j < Resolution; j++)
    {
        for (int k = 0; k < Resolution; k++)
        {
            inFile << wa[j][k] << "\t";
        }
        inFile << endl;
    }
    inFile.close();
    inFile.open("W2.txt", ios::trunc);
    for (int j = 0; j < Resolution; j++)
    {
        for (int k = 0; k < Resolution; k++)
        {
            inFile << wb[j][k] << "\t";
        }
        inFile << endl;
    }
    inFile.close();
}

void CMAC::LoadPara()
{
    ifstream file;
    file.open("W1.txt");
    for (int j = 0; j < Resolution; j++)
    {
        for (int k = 0; k < Resolution; k++)
        {
            file >> wa[j][k] ;
        }
    }
    file.close();
    file.open("W2.txt");
    for (int j = 0; j < Resolution; j++)
    {
        for (int k = 0; k < Resolution; k++)
        {
            file >> wb[j][k];
        }
    }
    file.close();
}

void CMAC::Predict(double x, double y, double joint_value[])
{

    Y[0] = x;
    Y[1] = y;

    int local_coord;
    int shift_amount;
    int input_index;
    int coord;
    int j;
    int k;
    for (int r = 0; r < Field_Size; r++)
    {
        int Coord[N];
        for (int c = 0; c < N; c++)
        {
            input_index = static_cast <int>(round(Y[c] * Resolution));
            shift_amount = Field_Size - input_index % Field_Size;
            local_coord = (shift_amount + RFpos[r][c]) % Field_Size;
            coord = input_index + local_coord;
            Coord[c] = coord;
            Position[r][c] = coord;
        }
    }
        ifstream file;
    file.open("W1.txt");
    for (int j = 0; j < Resolution; j++)
    {
        for (int k = 0; k < Resolution; k++)
        {
            file >> wa[j][k] ;
        }
    }
    file.close();
    file.open("W2.txt");
    for (int j = 0; j < Resolution; j++)
    {
        for (int k = 0; k < Resolution; k++)
        {
            file >> wb[j][k];
        }
    }
    file.close();
        X[0] = 0;
        for (int r = 0; r < Field_Size; r++)
        {
            j = Position[r][0];
            k = Position[r][1];
//cout<<j<<" "<<k<<endl;
//cout<<wa[j][k];
            X[0] += wa[j][k];
        }
        X[1] = 0;
        for (int r = 0; r < Field_Size; r++)
        {
            j = Position[r][0];
            k = Position[r][1];
            X[1] += wb[j][k];
        }


    joint_value[0] = X[0];
    joint_value[1] = X[1];

    cout << "Prediction:" << endl << joint_value[0] << " " << joint_value[1]  << endl;



}

/*int main(){
    CMAC net;

    double INPUT[140][2] = { { 0.112853, 0.870293 }, { 0.169279, 0.870293 }, { 0.225705, 0.870293 }, { 0.282132, 0.870293 }, { 0.335423, 0.878661 }, { 0.376176, 0.878661 }, { 0.429467, 0.882845 }, { 0.576803, 0.895397 }, { 0.658307, 0.887029 }, { 0.727273, 0.878661 }, { 0.793103, 0.853556 }, { 0.884013, 0.832636 }, { 0.918495, 0.757322 }, { 0.808777, 0.736402 }, { 0.721003, 0.719665 }, { 0.645768, 0.707113 }, { 0.592476, 0.698745 }, { 0.501567, 0.690377 }, { 0.432602, 0.682008 }, { 0.363636, 0.677824 }, { 0.304075, 0.677824 }, { 0.241379, 0.677824 }, { 0.169279, 0.682008 }, { 0.0909091, 0.661088 }, { 0.0909091, 0.527197 }, { 0.200627, 0.518828 }, { 0.269592, 0.514644 }, { 0.344828, 0.51046 }, { 0.429467, 0.502092 }, { 0.507837, 0.497908 }, { 0.60815, 0.497908 }, { 0.658307, 0.497908 }, { 0.714734, 0.493724 }, { 0.802508, 0.493724 }, { 0.884013, 0.485356 }, { 0.871473, 0.368201 }, { 0.77116, 0.368201 }, { 0.695925, 0.364017 }, { 0.62069, 0.359833 }, { 0.510972, 0.351464 }, { 0.435737, 0.338912 }, { 0.369906, 0.334728 }, { 0.30721, 0.317992 }, { 0.22884, 0.292887 }, { 0.141066, 0.280335 }, { 0.0877743, 0.167364 }, { 0.210031, 0.150628 }, { 0.382445, 0.133891 }, { 0.520376, 0.125523 }, { 0.774295, 0.121339 }, { 0.862069, 0.1841 }, { 0.796238, 0.175732 }, { 0.752351, 0.1841 }, { 0.708464, 0.1841 }, { 0.680251, 0.192469 }, { 0.601881, 0.196653 }, { 0.551724, 0.175732 }, { 0.489028, 0.175732 }, { 0.445141, 0.146444 }, { 0.401254, 0.150628 }, { 0.332288, 0.158996 }, { 0.269592, 0.167364 }, { 0.244514, 0.167364 }, { 0.175549, 0.150628 }, { 0.0940439, 0.138075 }, { 0.0815047, 0.317992 }, { 0.172414, 0.32636 }, { 0.238245, 0.322176 }, { 0.30094, 0.305439 }, { 0.388715, 0.288703 }, { 0.45768, 0.276151 }, { 0.557994, 0.267782 }, { 0.633229, 0.301255 }, { 0.761755, 0.284519 }, { 0.858934, 0.284519 }, { 0.940439, 0.284519 }, { 0.946708, 0.384937 }, { 0.815047, 0.393305 }, { 0.702194, 0.364017 }, { 0.611285, 0.376569 }, { 0.507837, 0.376569 }, { 0.426332, 0.368201 }, { 0.376176, 0.376569 }, { 0.310345, 0.384937 }, { 0.23511, 0.393305 }, { 0.15047, 0.410042 }, { 0.0815047, 0.401674 }, { 0.0564263, 0.594142 }, { 0.188088, 0.58159 }, { 0.297806, 0.594142 }, { 0.410658, 0.598326 }, { 0.561129, 0.60251 }, { 0.721003, 0.615063 }, { 0.833856, 0.635983 }, { 0.937304, 0.648536 }, { 0.934169, 0.853556 }, { 0.796238, 0.845188 }, { 0.69906, 0.845188 }, { 0.595611, 0.828452 }, { 0.470219, 0.807531 }, { 0.949843, 0.878661 }, { 0.946708, 0.631799 }, { 0.940439, 0.502092 }, { 0.924765, 0.125523 }, { 0.808777, 0.133891 }, { 0.805643, 0.230126 }, { 0.840125, 0.343096 }, { 0.836991, 0.451883 }, { 0.840125, 0.594142 }, { 0.84326, 0.786611 }, { 0.739812, 0.723849 }, { 0.749216, 0.60251 }, { 0.746082, 0.472803 }, { 0.727273, 0.364017 }, { 0.711599, 0.175732 }, { 0.630094, 0.150628 }, { 0.652038, 0.359833 }, { 0.661442, 0.569038 }, { 0.652038, 0.690377 }, { 0.630094, 0.803347 }, { 0.539185, 0.786611 }, { 0.564263, 0.560669 }, { 0.576803, 0.439331 }, { 0.570533, 0.301255 }, { 0.548589, 0.146444 }, { 0.46395, 0.158996 }, { 0.482759, 0.322176 }, { 0.482759, 0.464435 }, { 0.501567, 0.627615 }, { 0.507837, 0.74477 }, { 0.413793, 0.74477 }, { 0.420063, 0.564854 }, { 0.413793, 0.460251 }, { 0.420063, 0.384937 }, { 0.413793, 0.259414 }, { 0.338558, 0.200837 }, { 0.357367, 0.343096 }, { 0.351097, 0.468619 }, { 0.357367, 0.619247 }, { 0.357367, 0.786611 } };
    double OUTPUT[140][2] = { { 0.472042, 0.500017 }, { 0.472042, 0.462618 }, { 0.472409, 0.424285 }, { 0.472409, 0.385951 }, { 0.472042, 0.351357 }, { 0.472409, 0.322373 }, { 0.472409, 0.28778 }, { 0.472409, 0.194283 }, { 0.468364, 0.145665 }, { 0.465422, 0.106396 }, { 0.456596, 0.0699324 }, { 0.450345, 0.0278589 }, { 0.437841, 0.0138343 }, { 0.4349, 0.0615176 }, { 0.4349, 0.103591 }, { 0.4349, 0.145665 }, { 0.4349, 0.173714 }, { 0.4349, 0.227007 }, { 0.4349, 0.27095 }, { 0.4349, 0.313959 }, { 0.432325, 0.355097 }, { 0.431958, 0.396236 }, { 0.431958, 0.440179 }, { 0.425338, 0.487863 }, { 0.396654, 0.466358 }, { 0.397022, 0.396236 }, { 0.398861, 0.354162 }, { 0.398861, 0.306479 }, { 0.398861, 0.255991 }, { 0.398861, 0.210177 }, { 0.398861, 0.153144 }, { 0.398861, 0.126965 }, { 0.398861, 0.0989164 }, { 0.398861, 0.0577778 }, { 0.398125, 0.025054 }, { 0.38268, 0.0259889 }, { 0.38268, 0.0661926 }, { 0.38268, 0.0998513 }, { 0.382312, 0.136315 }, { 0.380474, 0.191478 }, { 0.377164, 0.230747 }, { 0.37459, 0.26721 }, { 0.370177, 0.301804 }, { 0.362087, 0.341073 }, { 0.355835, 0.386886 }, { 0.334874, 0.388756 }, { 0.335241, 0.324243 }, { 0.338919, 0.233552 }, { 0.339287, 0.162494 }, { 0.339287, 0.0568428 }, { 0.38268, 0.0147693 }, { 0.38268, 0.0315987 }, { 0.38268, 0.053103 }, { 0.38268, 0.0755421 }, { 0.38268, 0.0961115 }, { 0.38268, 0.12603 }, { 0.381945, 0.147535 }, { 0.379371, 0.177454 }, { 0.372751, 0.198023 }, { 0.372751, 0.220462 }, { 0.372751, 0.257861 }, { 0.370177, 0.29152 }, { 0.370177, 0.305544 }, { 0.364661, 0.338268 }, { 0.359145, 0.376601 }, { 0.381577, 0.424285 }, { 0.387829, 0.376601 }, { 0.387829, 0.340138 }, { 0.387829, 0.300869 }, { 0.387829, 0.247576 }, { 0.387829, 0.207372 }, { 0.387829, 0.155014 }, { 0.394448, 0.120421 }, { 0.394448, 0.0587127 }, { 0.394448, 0.0194441 }, { 0.394448, 2.48223e-05 }, { 0.406216, 2.48223e-05 }, { 0.410996, 0.0381435 }, { 0.409158, 0.0895666 }, { 0.409158, 0.134445 }, { 0.407687, 0.191478 }, { 0.404745, 0.235422 }, { 0.404745, 0.26534 }, { 0.404745, 0.305544 }, { 0.404745, 0.352292 }, { 0.404745, 0.405585 }, { 0.399964, 0.445789 }, { 0.434164, 0.498147 }, { 0.434164, 0.41774 }, { 0.440048, 0.347617 }, { 0.440048, 0.275625 }, { 0.441151, 0.182128 }, { 0.441151, 0.0951765 }, { 0.441519, 0.0409484 }, { 0.441151, 2.48223e-05 }, { 0.472042, 2.48223e-05 }, { 0.474983, 0.0605827 }, { 0.479764, 0.113876 }, { 0.479764, 0.173714 }, { 0.479764, 0.251316 }, { 0.481971, 2.48223e-05 }, { 0.444829, 2.48223e-05 }, { 0.42828, 2.48223e-05 }, { 0.37128, 2.48223e-05 }, { 0.37128, 0.0269239 }, { 0.386358, 0.0287938 }, { 0.400332, 0.0315987 }, { 0.415042, 0.0334686 }, { 0.435635, 0.0353387 }, { 0.464687, 0.0372086 }, { 0.461009, 0.0867618 }, { 0.444829, 0.077412 }, { 0.424971, 0.0755421 }, { 0.410629, 0.0755421 }, { 0.384519, 0.0755421 }, { 0.376429, 0.109201 }, { 0.403641, 0.115746 }, { 0.435267, 0.124161 }, { 0.456229, 0.132575 }, { 0.474983, 0.152209 }, { 0.474983, 0.206438 }, { 0.440048, 0.175584 }, { 0.419822, 0.159689 }, { 0.398861, 0.152209 }, { 0.375693, 0.147535 }, { 0.375693, 0.190543 }, { 0.394816, 0.199893 }, { 0.420558, 0.214852 }, { 0.448506, 0.219527 }, { 0.470203, 0.224202 }, { 0.47388, 0.283105 }, { 0.43968, 0.263471 }, { 0.420558, 0.254121 }, { 0.40879, 0.241966 }, { 0.388564, 0.229812 }, { 0.375693, 0.261601 }, { 0.400332, 0.27282 }, { 0.419822, 0.294324 }, { 0.444461, 0.310219 }, { 0.477558, 0.327048 } };


    net.Train(INPUT, OUTPUT);
    net.SavePara();
    //net.LoadPara();
    double joint_position_normalized[2];
    net.Predict(0.163009,0.276151, joint_position_normalized);

    return 0;
}

/*ifstream file;
file.open("D:\Justin\VS2013\CMAC\test.txt");
if (file.is_open()){ cout << "OK"; }
for (int m = 0; m < 140; m++){
file >> INPUT[m][0];
file >> INPUT[m][1];
file >> OUTPUT[m][0];
file >> OUTPUT[m][1];
cout << INPUT[m][0] << "\t" << INPUT[m][1] << "\t" << OUTPUT [m][0] << "\t" << OUTPUT [m][1] << "\t" << m << endl;
}
file.close();*/

/*double w[2][50][2];
for(int j = 0; j < Resolution; j++)
{
for(int k = 0; k < Resolution; k++)
{
//w[0][j][k] = 0.5;
//w[1][j][k] = 0.5;
w[0][j][k] = (double) rand() / (double) (RAND_MAX)*2-1;
w[1][j][k] = (double) rand() /  (double) (RAND_MAX)*2-1;
cout<<w[1][j][k]<<" ";
}cout<<endl;
}*/

/*ifstream file;
file.open("data/Joint_Value_Normalized.txt");
for (int m = 0; m < num_sample; m++){
for (int i = 0; i < 2; i++){
file >> OUTPUT[m][i];

}
}
file.close();

file.open("data/Object_Center_Normalized.txt");
for (int m = 0; m < num_sample; m++){
for (int i = 0; i < 2; i++){
file >> INPUT[m][i];
}
cout << endl;
}
file.close();*/

//read group b data:
