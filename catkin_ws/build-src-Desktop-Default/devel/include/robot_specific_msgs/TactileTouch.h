// Generated by gencpp from file robot_specific_msgs/TactileTouch.msg
// DO NOT EDIT!


#ifndef ROBOT_SPECIFIC_MSGS_MESSAGE_TACTILETOUCH_H
#define ROBOT_SPECIFIC_MSGS_MESSAGE_TACTILETOUCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_specific_msgs
{
template <class ContainerAllocator>
struct TactileTouch_
{
  typedef TactileTouch_<ContainerAllocator> Type;

  TactileTouch_()
    : button(0)
    , state(0)  {
    }
  TactileTouch_(const ContainerAllocator& _alloc)
    : button(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _button_type;
  _button_type button;

   typedef uint8_t _state_type;
  _state_type state;


    enum { buttonFront = 1u };
     enum { buttonMiddle = 2u };
     enum { buttonRear = 3u };
     enum { stateReleased = 0u };
     enum { statePressed = 1u };
 

  typedef boost::shared_ptr< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> const> ConstPtr;

}; // struct TactileTouch_

typedef ::robot_specific_msgs::TactileTouch_<std::allocator<void> > TactileTouch;

typedef boost::shared_ptr< ::robot_specific_msgs::TactileTouch > TactileTouchPtr;
typedef boost::shared_ptr< ::robot_specific_msgs::TactileTouch const> TactileTouchConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_specific_msgs::TactileTouch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_specific_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'robot_specific_msgs': ['/home/biolearning_a/catkin_ws/src/robot_specific_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b75165bf9dfed26d50ad4e3162304225";
  }

  static const char* value(const ::robot_specific_msgs::TactileTouch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb75165bf9dfed26dULL;
  static const uint64_t static_value2 = 0x50ad4e3162304225ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_specific_msgs/TactileTouch";
  }

  static const char* value(const ::robot_specific_msgs::TactileTouch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# From ROS package from Uni Freiburg\n\
# A message for Nao's tactile interface (touch buttons on the head)\n\
\n\
uint8 button            # which of the three segments is touched\n\
uint8 state             # pressed or released, see below\n\
\n\
uint8 buttonFront=1\n\
uint8 buttonMiddle=2\n\
uint8 buttonRear=3\n\
\n\
uint8 stateReleased=0\n\
uint8 statePressed=1\n\
";
  }

  static const char* value(const ::robot_specific_msgs::TactileTouch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TactileTouch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_specific_msgs::TactileTouch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_specific_msgs::TactileTouch_<ContainerAllocator>& v)
  {
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SPECIFIC_MSGS_MESSAGE_TACTILETOUCH_H
